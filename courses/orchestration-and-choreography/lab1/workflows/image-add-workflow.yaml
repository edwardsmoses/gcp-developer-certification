# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
main:
  # event contains the CloudEvents event
  params: [event]
  steps:
    - logEvent:
        # log the event that was sent to the workflow
        call: sys.log
        args:
          text: ${"event=" + json.encode_to_string(event)}
          severity: INFO
    - init:
        # initialize variables
        assign:
          - fileName: ${event.data.name}
          - bucket: ${event.data.bucket}
          - gsUri: ${"gs://" + bucket + "/" + fileName}
          - projectId: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - workflowExecutionId: ${sys.get_env("GOOGLE_CLOUD_WORKFLOW_EXECUTION_ID")}
          - extractMetadataFunctionRegion: us-central1
          - extractMetadataFunctionName: extract-image-metadata
          - thumbnailQueueId: thumbnail-task-queue
          - thumbnailQueueLocation: us-central1
          - thumbnailQueueName: ${"projects/" + projectId + "/locations/" + thumbnailQueueLocation + "/queues/" + thumbnailQueueId}
          - thumbnailServiceLocation: us-central1
          - thumbnailServiceName: create-thumbnail
          - thumbnailRequestBody: '${"{\"gcsImageUri\": \"" + gsUri + "\"}"}'
          - thumbnailCallingServiceAccount: ${"workflows-sa@" + projectId + ".iam.gserviceaccount.com"}
    - imageAnalysisCall:
        # call the Vision API
        call: http.post
        args:
          url: https://vision.googleapis.com/v1/images:annotate
          headers:
            Content-Type: application/json
          auth:
            type: OAuth2
          body:
            requests:
            - image:
                source:
                  gcsImageUri: ${gsUri}
              features:
              - type: SAFE_SEARCH_DETECTION
              - type: LABEL_DETECTION
              - type: DOCUMENT_TEXT_DETECTION
        result: imageAnalysisResponse
    - logImageAnalysisResponse:
        # log the response from Cloud Vision
        call: sys.log
        args:
          text: ${"imageAnalysisResponse=" + json.encode_to_string(imageAnalysisResponse)}
          severity: INFO
    - extractImageMetadata:
        # send the Cloud Vision response to the extract function
        call: http.post
        args:
          url: ${"https://" + extractMetadataFunctionRegion + "-" + projectId + ".cloudfunctions.net/" + extractMetadataFunctionName}
          auth:
            type: OIDC
          body: ${imageAnalysisResponse.body}
        result: imageMetadata
    - logImageMetadata:
        # log the function response
        call: sys.log
        args:
          text: ${"imageMetadata=" + json.encode_to_string(imageMetadata.body)}
          severity: INFO
    - checkSafety:
        # abort if Cloud Vision determined that the image is unsafe
        switch:
          - condition: ${imageMetadata.body.safe == true}
            # image is safe, continue
            next: storeMetadata
        next: end
    - storeMetadata:
        # call the Firestore API to store the metadata, using the filename as the ID
        call: http.request
        args:
          url: ${"https://firestore.googleapis.com/v1/projects/" + projectId + "/databases/(default)/documents/images/" + fileName + "?updateMask.fieldPaths=labels&updateMask.fieldPaths=text&updateMask.fieldPaths=created"}
          auth:
            type: OAuth2
          method: PATCH
          body:
            name: ${"projects/" + projectId + "/databases/(default)/documents/images/" + fileName}
            fields:
              labels:
                arrayValue:
                  values: ${imageMetadata.body.labels}
              text:
                stringValue: ${imageMetadata.body.text}
              created:
                timestampValue: ${imageMetadata.body.created}
        result: storeMetadataResponse
    - logFirestoreResponse:
        # log the response from the Firestore API call
        call: sys.log
        args:
          text: ${"storeMetadataResponse=" + json.encode_to_string(storeMetadataResponse.body)}
          severity: INFO
    - getThumbnailService:
        # call the Cloud Run connector to retrieve the service URL for the thumbnail service
        call: googleapis.run.v2.projects.locations.services.get
        args:
          name: ${"projects/" + projectId + "/locations/" + thumbnailServiceLocation + "/services/" + thumbnailServiceName}
        result: thumbnailServiceInfo
    - logGetServiceResponse:
        # log the response from the connector
        call: sys.log
        args:
          text: ${"thumbnailServiceInfo=" + json.encode_to_string(thumbnailServiceInfo)}
          severity: INFO
    - queueThumbnail:
        # call the Cloud Tasks connector to create a task to be handled by the Cloud Run service
        call: googleapis.cloudtasks.v2.projects.locations.queues.tasks.create
        args:
          parent: ${thumbnailQueueName}
          body:
            task:
              httpRequest:
                url: ${thumbnailServiceInfo.uri}
                httpMethod: POST
                headers:
                  Content-Type: application/json
                # body must be Base64-encoded string, text.encode converts string to bytes
                body: "${base64.encode(text.encode(thumbnailRequestBody))}"
                oidcToken:
                  serviceAccountEmail: ${thumbnailCallingServiceAccount}
                  audience: ${thumbnailServiceInfo.uri}
        result: task
    - logTaskResponse:
        # log the response from creating the task
        call: sys.log
        args:
          text: ${"task=" + json.encode_to_string(task)}
          severity: INFO
    - completed:
        return: ${workflowExecutionId}
